% This file was created with Citavi 6.14.0.0

@book{.1992,
 year = {1992},
 title = {Breakthroughs in Statistics},
 publisher = {{Springer, New York, NY}}
}


@proceedings{.2007,
 year = {2007},
 title = {Future of Software Engineering (FOSE '07)},
 publisher = {IEEE}
}


@proceedings{.2010,
 year = {2010}
}


@proceedings{.2011,
 year = {2011},
 title = {2011 33rd International Conference on Software Engineering (ICSE)},
 isbn = {1558-1225}
}


@proceedings{.2012,
 year = {2012},
 title = {2012 IEEE Fifth International Conference on Software Testing, Verification and Validation},
 publisher = {IEEE}
}


@proceedings{.2013,
 year = {2013},
 title = {2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE)},
 publisher = {IEEE}
}


@proceedings{.2013b,
 year = {2013},
 title = {2013 IEEE Sixth International Conference on Software Testing, Verification and Validation},
 publisher = {IEEE}
}


@proceedings{.2015,
 year = {2015},
 publisher = {{Springer, Cham}}
}


@proceedings{.2015b,
 year = {2015},
 publisher = {{Springer, Cham}}
}


@proceedings{.2015c,
 year = {2015},
 publisher = {{Springer, Cham}}
}


@proceedings{.2015d,
 year = {2015},
 publisher = {{Springer, Cham}}
}


@proceedings{.2015e,
 year = {2015},
 publisher = {{Springer, Cham}}
}


@proceedings{.2015f,
 year = {2015},
 publisher = {{Springer, Cham}}
}


@proceedings{.2015g,
 year = {2015},
 title = {2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)},
 publisher = {IEEE}
}


@proceedings{.2019,
 year = {2019},
 publisher = {{Springer, Cham}}
}


@proceedings{.2019b,
 year = {2019},
 publisher = {{Springer, Cham}}
}


@proceedings{.2019c,
 year = {2019},
 publisher = {{Springer, Cham}}
}


@proceedings{.2019d,
 year = {2019},
 publisher = {{Springer, Cham}}
}


@proceedings{.2019e,
 year = {2019},
 publisher = {{Springer, Cham}}
}


@proceedings{.null,
 year = {null},
 title = {Proceedings of the 2004 Congress on Evolutionary Computation (IEEE Cat. No.04TH8753)},
 publisher = {IEEE}
}


@proceedings{ACMSpecialInterestGrouponSoftwareEngineering.2020,
 year = {2020},
 title = {Proceedings of the IEEE/ACM 42nd International Conference on Software Engineering Workshops},
 address = {New York,NY,United States},
 publisher = {{Association for Computing Machinery}},
 isbn = {9781450379632},
 series = {ACM Digital Library},
 institution = {{ACM Special Interest Group on Software Engineering}},
 doi = {\url{10.1145/3387940}}
}


@book{Adami.1998,
 abstract = {The term {\textquotedbl}artificial life{\textquotedbl} describes research into synthetic systems that possess some of the essential properties of life. This truly interdisciplinary effort includes biologists, computer scientists, physicists, chemists, geneticists, and others. The field may be viewed as an attempt to understand high-level behavior from low-level rules---for example, how the simple interactions between ants and their environment lead to complex trail-following behavior. An understanding of such relationships in particular systems can suggest novel solutions to complex real-world problems such as disease prevention, stock-market prediction, and data-mining on the Internet.



Since their inception in 1987, the Artificial Life meetings have grown from small workshops to truly international conferences, reflecting the fields increasing appeal to researchers in all areas of science.},
 author = {Adami, Christoph and Belew, Richard K. and Kitano, Hiroaki and Taylor, Charles E.},
 year = {1998},
 title = {Artificial life VI: Proceedings of the Sixth International Conference on Artificial Life ; [conference held at UCLA, June 27-29, 1998},
 address = {Cambridge, Mass},
 publisher = {{MIT Press}},
 isbn = {9780262510998},
 series = {A Bradford book},
 institution = {{International Conference on Artificial Life}}
}


@misc{AgitarTechnologies.2022,
 author = {{Agitar Technologies}},
 year = {2022},
 title = {AgitarOne JUnit Generator},
 url = {\url{http://www.agitar.com/solutions/products/automated_junit_generation.html}},
 urldate = {09.09.2022}
}


@phdthesis{Albunian.2020,
 abstract = {As software testing is a laborious and error-prone task, automation is desirable. Search-based unit test generation applies evolutionary search algorithms to generate software tests and, in the context of unit testing object-oriented software, Genetic Algorithms (GAs) are frequently employed to generate unit tests that maximise code coverage. Although GAs are effective at generating tests that achieve high code coverage, they are still far from being able to satisfy all test goals (e.g., covering all branches). While some general limitations are known, there is still a lack of understanding of the search behaviour during the optimization, making it difficult to identify the factors that make a search problem difficult.Therefore, this thesis aims to investigate the search behaviour when GAs are applied to generate object-oriented unit tests and, more specifically, identify the reasons why the search fails to achieve the desired test goals. This is achieved by investigating (1) the fitness landscape structure and the impact of its features on the generation of unit tests and (2) the influence of population diversity on generating potential unit tests. Based on the outcome of this investigation, the impact of test case reduction on the landscape features and population diversity is also investigated.Our results reveal that classical indicators for rugged fitness landscapes suggest well searchable problems in the case of unit test generation, but the fitness landscape for most problem instances is dominated by detrimental plateaus. However, increasing diversity does not have a beneficial effect on coverage in general, but it may improve coverage when diversity is promoted adaptively. In fact, increasing diversity has a negative impact on the individual length, which can also be mitigated with the adaptive diversity. Applying the test case reduction seems to be promising in improving the landscape structure and reducing the negative side effects of diversity on length, but have no considerable impact on the search performance.},
 author = {Albunian, Nasser},
 year = {2020},
 title = {An Investigation of Search Behaviour in Search-Based Unit Test Generation},
 url = {\url{https://etheses.whiterose.ac.uk/28158/}},
 file = {Albunian - An Investigation of Search Behaviour:Attachments/Albunian - An Investigation of Search Behaviour.pdf:application/pdf}
}


@article{Arcuri.2013,
 abstract = {Many software engineering problems have been addressed with search algorithms. Search algorithms usually depend on several parameters (e.g., population size and crossover rate in genetic algorithms), and the choice of these parameters can have an impact on the performance of the algorithm. It has been formally proven in the No Free Lunch theorem that it is impossible to tune a search algorithm such that it will have optimal settings for all possible problems. So, how to properly set the parameters of a search algorithm for a given software engineering problem? In this paper, we carry out the largest empirical analysis so far on parameter tuning in search-based software engineering. More than one million experiments were carried out and statistically analyzed in the context of test data generation for object-oriented software using the EvoSuite tool. Results show that tuning does indeed have impact on the performance of a search algorithm. But, at least in the context of test data generation, it does not seem easy to find good settings that significantly outperform the ``default'' values suggested in the literature. This has very practical value for both researchers (e.g., when different techniques are compared) and practitioners. Using ``default'' values is a reasonable and justified choice, whereas parameter tuning is a long and expensive process that might or might not pay off in the end.},
 author = {Arcuri, Andrea and Fraser, Gordon},
 year = {2013},
 title = {Parameter tuning or default values? An empirical investigation in search-based software engineering},
 url = {\url{https://link.springer.com/article/10.1007/s10664-013-9249-9}},
 pages = {594--623},
 volume = {18},
 number = {3},
 issn = {1573-7616},
 journal = {Empirical Software Engineering},
 doi = {\url{10.1007/s10664-013-9249-9}},
 file = {Arcuri, Fraser 2013 - Parameter tuning or default values:Attachments/Arcuri, Fraser 2013 - Parameter tuning or default values.pdf:application/pdf}
}


@article{Arcuri.2014,
 abstract = {SUMMARYRandomized algorithms are widely used to address many types of software engineering problems, especially in the area of software verification and validation with a strong emphasis on test au...},
 author = {Arcuri, Andrea and Briand, Lionel},
 year = {2014},
 title = {A Hitchhiker's guide to statistical tests for assessing randomized algorithms in software engineering},
 url = {\url{https://onlinelibrary.wiley.com/doi/full/10.1002/stvr.1486}},
 pages = {219--250},
 volume = {24},
 number = {3},
 issn = {0960-0833},
 journal = {Software Testing, Verification and Reliability},
 doi = {\url{10.1002/stvr.1486}},
 file = {Arcuri, Briand 2014 - A Hitchhiker's guide to statistical:Attachments/Arcuri, Briand 2014 - A Hitchhiker's guide to statistical.pdf:application/pdf}
}


@article{BartzBeielstein.04,
 author = {Bartz-Beielstein, T. and Markon, S.},
 year = {2004},
 title = {Tuning search algorithms for real-world applications: a regression tree based approach},
 doi = {\url{10.1109/cec.2004.1330986}}
}


@misc{Campos.2022,
 abstract = {A key factor of studying Evolutionary Algorithms (EA) on automatic test generation is the selection of classes under test. As many open source classes, for example contained in the SF110 corpus, are trivially simple and would not reveal differences between algorithms, a selection of non-trivial classes has been proposed in the DynaMOSA study. This is a corpus of 117 open-source Java projects and 346 classes, selected from four different benchmarks. The complexity of classes ranges from 14 statements and 2 branches to 16,624 statements and 7,938 branches. The average number of statements is 1,109, and the average number of branches is 259.},
 author = {Campos, Jos{\'e}},
 year = {2022},
 title = {Non-trivial Java Classes to Study the Performance of Search-based Software Testing Approaches},
 url = {\url{https://github.com/jose/non-trivial-java-classes-to-study-search-based-software-testing-approaches}}
}


@book{DarrellWhitley.2000,
 abstract = {PDF | This paper reports work done over the past three years using rank-based allocation of reproductive trials. New evidence and arguments are... | Find, read and cite all the research you need on ResearchGate},
 author = {{Darrell Whitley}},
 year = {2000},
 title = {The GENITOR Algorithm and Selection Pressure: Why Rank-Based Allocation of Reproductive Trials is Best},
 url = {\url{https://www.researchgate.net/profile/darrell-whitley-2/publication/2527551_the_genitor_algorithm_and_selection_pressure_why_rank-based_allocation_of_reproductive_trials_is_best}},
 volume = {89},
 file = {Darrell Whitley 2000 - The GENITOR Algorithm and Selection:Attachments/Darrell Whitley 2000 - The GENITOR Algorithm and Selection.pdf:application/pdf}
}


@book{DarrellWhitley.2000b,
 abstract = {PDF | This paper reports work done over the past three years using rank-based allocation of reproductive trials. New evidence and arguments are... | Find, read and cite all the research you need on ResearchGate},
 author = {{Darrell Whitley}},
 year = {2000},
 title = {The GENITOR Algorithm and Selection Pressure: Why Rank-Based Allocation of Reproductive Trials is Best},
 url = {\url{https://www.researchgate.net/profile/darrell-whitley-2/publication/2527551_the_genitor_algorithm_and_selection_pressure_why_rank-based_allocation_of_reproductive_trials_is_best}},
 volume = {89},
 file = {Darrell Whitley 2000 - The GENITOR Algorithm and Selection (2):Attachments/Darrell Whitley 2000 - The GENITOR Algorithm and Selection (2).pdf:application/pdf}
}


@article{Doran.1981,
 author = {Doran, G. T.},
 year = {1981},
 title = {There's a S.M.A.R.T. way to write management's goals and objectives},
 url = {\url{https://community.mis.temple.edu/mis0855002fall2015/files/2015/10/S.M.A.R.T-Way-Management-Review.pdf}},
 urldate = {22.07.2022},
 pages = {35--36}
}


@article{Eiben.1999,
 abstract = {The issue of controlling values of various parameters of an evolutionary algorithm is one of the most important and promising areas of research in evolutionary computation: it has a potential of adjusting the algorithm to the problem while solving the problem. In the paper we: 1) revise the terminology, which is unclear and confusing, thereby providing a classification of such control mechanisms, and 2) survey various forms of control which have been studied by the evolutionary computation community in recent years. Our classification covers the major forms of parameter control in evolutionary computation and suggests some directions for further research.},
 author = {Eiben, A. E. and Hinterding, R. and Michalewicz, Z.},
 title = {Parameter control in evolutionary algorithms}
}


@inproceedings{Fraser.2012,
 author = {Fraser, Gordon and Arcuri, Andrea},
 title = {The Seed is Strong: Seeding Strategies in Search-Based Software Testing},
 publisher = {IEEE},
 booktitle = {2012 IEEE Fifth International Conference on Software Testing, Verification and Validation},
 year = {2012},
 doi = {\url{10.1109/icst.2012.92}},
 file = {Fraser, Arcuri 2012 - The Seed is Strong:Attachments/Fraser, Arcuri 2012 - The Seed is Strong.pdf:application/pdf}
}


@article{Fraser.2013,
 author = {Fraser, Gordon and Arcuri, Andrea},
 year = {2013},
 title = {Whole Test Suite Generation},
 pages = {276--291},
 volume = {39},
 number = {2},
 issn = {0098-5589},
 journal = {IEEE Transactions on Software Engineering},
 doi = {\url{10.1109/tse.2012.14}},
 file = {Fraser, Arcuri 2013 - Whole Test Suite Generation:Attachments/Fraser, Arcuri 2013 - Whole Test Suite Generation.pdf:application/pdf}
}


@misc{Fraser.2013b,
 abstract = {Research on software testing produces many innovative automated techniques, but because software testing is by necessity incomplete and approximate, any new technique faces the challenge of an empirical assessment. Scientific advance is typically demonstrated using a set of examples that represent a particular problem addressed by the technique. However, demonstrating scientific advance is not necessarily the same as demonstrating practical value: A technique that works well on small, artificial problems might not scale up to the complexity of real systems. Ideally, one would use large ``real-world'' case studies to minimize the threats to external validity when evaluating research tools. However, neither choosing such case studies nor applying research prototypes to them are trivial tasks.},
 author = {Fraser, Gordon and Arcuri, Andrea},
 year = {2013},
 title = {SF110 Corpus of Classes},
 url = {\url{https://www.evosuite.org/experimental-data/sf110/}}
}


@inproceedings{Fraser.2013c,
 author = {Fraser, Gordon and Arcuri, Andrea},
 title = {EvoSuite: On the Challenges of Test Case Generation in the Real World},
 publisher = {IEEE},
 booktitle = {2013 IEEE Sixth International Conference on Software Testing, Verification and Validation},
 year = {2013},
 doi = {\url{10.1109/icst.2013.51}}
}


@article{Fraser.2014,
 author = {Fraser, Gordon and Arcuri, Andrea},
 year = {2014},
 title = {A Large-Scale Evaluation of Automated Unit Test Generation Using EvoSuite},
 pages = {1--42},
 volume = {24},
 number = {2},
 issn = {1049-331X},
 journal = {ACM Transactions on Software Engineering and Methodology},
 doi = {\url{10.1145/2685612}}
}


@article{Gelman.2009,
 abstract = {A linear regression of y on x can be approximated by a simple difference: the average values of y corresponding to the highest quarter or third of x, minus the average values of y corresponding to the lowest quarter or third of x. A simple theoretical analysis, similar to analyses that have been done in psychometrics, shows this comparison to perform reasonably well, with 80{\%}?90{\%} efficiency compared to the regression if the predictor is uniformly or normally distributed. By discretizing x into three categories, we claw back about half the efficiency lost by the commonly used strategy of dichotomizing the predictor.We illustrate with the example that motivated our research: an analysis of income and voting which we had originally performed for a scholarly journal but then wanted to communicate to a general audience.},
 author = {Gelman, Andrew and Park, David K.},
 year = {2009},
 title = {Splitting a Predictor at the Upper Quarter or Third and the Lower Quarter or Third},
 pages = {1--8},
 volume = {63},
 number = {1},
 issn = {0003-1305},
 journal = {The American Statistician},
 doi = {\url{10.1198/tast.2009.0001}},
 file = {Gelman, Park 2009 - Splitting a Predictor:Attachments/Gelman, Park 2009 - Splitting a Predictor.pdf:application/pdf}
}


@article{Harman.2001,
 author = {Harman, Mark and Jones, Bryan F.},
 year = {2001},
 title = {Search-based software engineering},
 url = {\url{https://www.sciencedirect.com/science/article/pii/s0950584901001896}},
 pages = {833--839},
 volume = {43},
 number = {14},
 issn = {0950-5849},
 journal = {Information and Software Technology},
 doi = {\url{10.1016/S0950-5849(01)00189-6}},
 file = {Harman, Jones 2001 - Search-based software engineering:Attachments/Harman, Jones 2001 - Search-based software engineering.pdf:application/pdf}
}


@inproceedings{Harman.2007,
 author = {Harman, Mark},
 title = {The Current State and Future of Search Based Software Engineering},
 publisher = {IEEE},
 booktitle = {Future of Software Engineering (FOSE '07)},
 year = {2007},
 doi = {\url{10.1109/fose.2007.29}},
 file = {Harman 2007 - The Current State and Future:Attachments/Harman 2007 - The Current State and Future.pdf:application/pdf}
}


@book{Hess.2004,
 author = {Hess, R. Melinda and {Kromrey D. Jeffrey}},
 year = {2004},
 title = {Robust confidence intervals for effect sizes: A comparative study of Cohen'sd and Cliff's delta under non-normality and heterogeneous variances},
 url = {\url{https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.487.8299&rep=rep1&type=pdf}}
}


@book{Kauffman.1987,
 author = {Kauffman, Stuart and Levin, Simon},
 year = {1987},
 title = {Towards a general theory of adaptive walks on rugged landscapes},
 url = {\url{https://reader.elsevier.com/reader/sd/pii/S0022519387800292?token=A3C11DE62AFD84E9763586F20A9C8DE4EB998AF8899D2387B7AE5ECF25D81B5AAC7A3B272477AACEA1315470807D3501&originRegion=eu-west-1&originCreation=20220731081144}},
 volume = {128},
 doi = {\url{10.1016/S0022-5193(87)80029-2}}
}


@article{Krawczyk.2016,
 abstract = {Despite more than two decades of continuous development learning from imbalanced data is still a focus of intense research. Starting as a problem of skewed distributions of binary tasks, this topic evolved way beyond this conception. With the expansion of machine learning and data mining, combined with the arrival of big data era, we have gained a deeper insight into the nature of imbalanced learning, while at the same time facing new emerging challenges. Data-level and algorithm-level methods are constantly being improved and hybrid approaches gain increasing popularity. Recent trends focus on analyzing not only the disproportion between classes, but also other difficulties embedded in the nature of data. New real-life problems motivate researchers to focus on computationally efficient, adaptive and real-time methods. This paper aims at discussing open issues and challenges that need to be addressed to further develop the field of imbalanced learning. Seven vital areas of research in this topic are identified, covering the full spectrum of learning from imbalanced data: classification, regression, clustering, data streams, big data analytics and applications, e.g., in social media and computer vision. This paper provides a discussion and suggestions concerning lines of future research for each of them.},
 author = {Krawczyk, Bartosz},
 year = {2016},
 title = {Learning from imbalanced data: open challenges and future directions},
 url = {\url{https://link.springer.com/article/10.1007/s13748-016-0094-0}},
 pages = {221--232},
 volume = {5},
 number = {4},
 issn = {2192-6360},
 journal = {Progress in Artificial Intelligence},
 doi = {\url{10.1007/s13748-016-0094-0}},
 file = {Krawczyk 2016 - Learning from imbalanced data:Attachments/Krawczyk 2016 - Learning from imbalanced data.pdf:application/pdf}
}


@inproceedings{Li.2013,
 author = {Li, Nan and Meng, Xin and Offutt, Jeff and Deng, Lin},
 title = {Is bytecode instrumentation as good as source code instrumentation: An empirical study with industrial tools (Experience Report)},
 publisher = {IEEE},
 booktitle = {2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE)},
 year = {2013},
 doi = {\url{10.1109/issre.2013.6698891}},
 file = {Li, Meng et al. 2013 - Is bytecode instrumentation as good:Attachments/Li, Meng et al. 2013 - Is bytecode instrumentation as good.pdf:application/pdf}
}


@article{Malan.2013,
 author = {Malan, Katherine M. and Engelbrecht, Andries P.},
 year = {2013},
 title = {A survey of techniques for characterising fitness landscapes and some possible ways forward},
 url = {\url{https://www.sciencedirect.com/science/article/pii/s0020025513003125}},
 pages = {148--163},
 volume = {241},
 issn = {0020-0255},
 journal = {Information Sciences},
 doi = {\url{10.1016/j.ins.2013.04.015}},
 file = {Malan, Engelbrecht 2013 - A survey of techniques:Attachments/Malan, Engelbrecht 2013 - A survey of techniques.pdf:application/pdf}
}


@article{Mann.1947,
 author = {Mann, H. B. and Whitney, D. R.},
 year = {1947},
 title = {On a Test of Whether one of Two Random Variables is Stochastically Larger than the Other},
 pages = {50--60},
 volume = {18},
 number = {1},
 issn = {0003-4851},
 journal = {The Annals of Mathematical Statistics},
 doi = {\url{10.1214/aoms/1177730491}},
 file = {Mann, Whitney 1947 - On a Test of Whether:Attachments/Mann, Whitney 1947 - On a Test of Whether.pdf:application/pdf}
}


@book{Matthay.2020,
 author = {Matthay, Ellicott and Glymour, Maria},
 year = {2020},
 title = {A graphical catalog of threats to validity: Linking social science with epidemiology},
 url = {\url{https://www.ncbi.nlm.nih.gov/pmc/articles/pmc7144753/}}
}


@article{McMinn.2004,
 abstract = {Abstract The use of metaheuristic search techniques for the automatic generation of test data has been a burgeoning interest for many researchers in recent years. Previous attempts to automate the ...},
 author = {McMinn, Phil},
 year = {2004},
 title = {Search-based software test data generation: a survey},
 pages = {105--156},
 volume = {14},
 number = {2},
 issn = {0960-0833},
 journal = {Software Testing, Verification and Reliability},
 doi = {\url{10.1002/stvr.294}},
 file = {McMinn 2004 - Search-based software test data generation:Attachments/McMinn 2004 - Search-based software test data generation.pdf:application/pdf}
}


@article{Moser.2016,
 abstract = {Combinatorially complex problems are often optimised with heuristic solvers which generally provide acceptable results but no indication as to how the quality achieved compares to the best possible. In previous work we have introduced Predictive Diagnostic Optimisation (PDO), a heuristic based on local search that provides information about the search space structure through a set of indicators whilst searching for the optimal solution. PDO can collect useful information about the search process, such as the variation in the number of steps needed to locally optimise a random solution and the error between the expected and actual qualities of the local optimum, known as the prediction error. Given previous experimental results on the quadratic assignment problem, it appears that a high prediction error coincides with lower search quality and vice versa. This work confirms this assumption with the help of two additional problems but also shows that the reliability of the prediction error is challenged by structural properties that lead to a homogeneity of the optima basins. Conversely, a high variation in the number of steps that lead to the local optima increases the reliability of the prediction error as an indicator of search quality.},
 author = {Moser, I. and Gheorghita, Marius and Aleti, Aldeida},
 year = {2016},
 title = {Investigating the correlation between indicators of predictive diagnostic optimisation and search result quality},
 url = {\url{https://www.sciencedirect.com/science/article/pii/S0020025516305916}},
 pages = {162--180},
 volume = {372},
 issn = {0020-0255},
 journal = {Information Sciences},
 doi = {\url{10.1016/j.ins.2016.08.021}}
}


@inproceedings{Panichella.2015,
 author = {Panichella, Annibale and Kifetew, Fitsum Meshesha and Tonella, Paolo},
 title = {Reformulating Branch Coverage as a Many-Objective Optimization Problem},
 publisher = {IEEE},
 booktitle = {2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)},
 year = {2015},
 doi = {\url{10.1109/icst.2015.7102604}}
}


@article{Panichella.2017,
 abstract = {The test case generation is intrinsically a multi-objective problem, since the goal is covering multiple test targets (e.g., branches). Existing search-based approaches either consider one target at a time or aggregate all targets into a single fitness function (whole-suite approach). Multi and many-objective optimisation algorithms (MOAs) have never been applied to this problem, because existing algorithms do not scale to the number of coverage objectives that are typically found in real-world software. In addition, the final goal for MOAs is to find alternative trade-off solutions in the objective space, while in test generation the interesting solutions are only those test cases covering one or more uncovered targets. In this paper, we present Dynamic Many-Objective Sorting Algorithm (DynaMOSA), a novel many-objective solver specifically designed to address the test case generation problem in the context of coverage testing. DynaMOSA extends our previous many-objective technique Many-Objective Sorting Algorithm (MOSA) with dynamic selection of the coverage targets based on the control dependency hierarchy. Such extension makes the approach more effective and efficient in case of limited search budget. We carried out an empirical study on 346 Java classes using three coverage criteria (i.e., statement, branch, and strong mutation coverage) to assess the performance of DynaMOSA with respect to the whole-suite approach (WS), its archive-based variant (WSA) and MOSA. The results show that DynaMOSA outperforms WSA in 28 percent of the classes for branch coverage (+8 percent more coverage on average) and in 27 percent of the classes for mutation coverage (+11 percent more killed mutants on average). It outperforms WS in 51 percent of the classes for statement coverage, leading to +11 percent more coverage on average. Moreover, DynaMOSA outperforms its predecessor MOSA for all the three coverage criteria in 19 percent of the classes with +8 percent more code coverage on...},
 author = {Panichella, Annibale and Kifetew, FitsumMeshesha and Tonella, Paolo},
 year = {2017},
 title = {Automated Test Case Generation as a Many-Objective Optimisation Problem with Dynamic Selection of the Targets},
 pages = {122--158},
 journal = {IEEE Transactions on Software Engineering}
}


@inproceedings{Panichella.2020,
 author = {Panichella, Annibale and Campos, Jos{\'e} and Fraser, Gordon},
 title = {EvoSuite at the SBST 2020 Tool Competition},
 pages = {549--552},
 publisher = {{Association for Computing Machinery}},
 isbn = {9781450379632},
 series = {ACM Digital Library},
 booktitle = {Proceedings of the IEEE/ACM 42nd International Conference on Software Engineering Workshops},
 year = {2020},
 address = {New York,NY,United States},
 doi = {\url{10.1145/3387940.3392266}},
 file = {Panichella, Campos et al. 2020 - EvoSuite at the SBST 2020:Attachments/Panichella, Campos et al. 2020 - EvoSuite at the SBST 2020.pdf:application/pdf}
}


@inproceedings{Paterson.2015,
 abstract = {Search-based testing supports developers by automatically generating test suites with high coverage, but the effectiveness of a search-based test generator depends on numerous parameters. It is unreasonable to expect developers to understand search algorithms well...},
 author = {Paterson, David and Turner, Jonathan and White, Thomas and Fraser, Gordon},
 title = {Parameter Control in Search-Based Generation of Unit Test Suites},
 url = {\url{https://link.springer.com/chapter/10.1007/978-3-319-22183-0_10}},
 pages = {141--156},
 publisher = {{Springer, Cham}},
 year = {2015},
 doi = {\url{10.1007/978-3-319-22183-0$\backslash$textunderscore}},
 file = {Paterson, Turner et al. 2015 - Parameter Control in Search-Based Generation:Attachments/Paterson, Turner et al. 2015 - Parameter Control in Search-Based Generation.pdf:application/pdf}
}


@article{Reidys.2001,
 author = {Reidys, Christian M. and Stadler, Peter F.},
 year = {2001},
 title = {Neutrality in fitness landscapes},
 pages = {321--350},
 volume = {117},
 number = {2-3},
 issn = {00963003},
 journal = {Applied Mathematics and Computation},
 doi = {\url{10.1016/S0096-3003(99)00166-6}}
}


@inproceedings{Rojas.2015,
 abstract = {Automated test generation techniques typically aim at maximising coverage of well-established structural criteria such as statement or branch coverage. In practice, generating tests only for one specific criterion may not be sufficient when testing object oriented...},
 author = {Rojas, Jos{\'e} Miguel and Campos, Jos{\'e} and Vivanti, Mattia and Fraser, Gordon and Arcuri, Andrea},
 title = {Combining Multiple Coverage Criteria in Search-Based Unit Test Generation},
 url = {\url{https://link.springer.com/chapter/10.1007/978-3-319-22183-0_7}},
 pages = {93--108},
 publisher = {{Springer, Cham}},
 year = {2015},
 doi = {\url{10.1007/978-3-319-22183-0{\textunderscore }7}},
 file = {Rojas, Campos et al. 2015 - Combining Multiple Coverage Criteria:Attachments/Rojas, Campos et al. 2015 - Combining Multiple Coverage Criteria.pdf:application/pdf}
}


@article{Shamshiri.2015,
 abstract = {Achieving high structural coverage is an important aim in software testing. Several search-based techniques have proved successful at automatically generating tests that achieve high coverage. However, despite the well- established arguments behind using evolutionary search algorithms (e.g., genetic algorithms) in preference to random search, it remains an open question whether the benefits can actually be observed in practice when generating unit test suites for object-oriented classes. In this paper, we report an empirical study on the effects of using a genetic algorithm (GA) to generate test suites over generating test suites incrementally with random search, by applying the EvoSuite unit test suite generator to 1,000 classes randomly selected from the SF110 corpus of open source projects. Surprisingly, the results show little difference between the coverage achieved by test suites generated with evolutionary search compared to those generated using random search. A detailed analysis reveals that the genetic algorithm covers more branches of the type where standard fitness functions provide guidance. In practice, however, we observed that the vast majority of branches in the analyzed projects provide no such guidance.},
 author = {Shamshiri, Sina and Rojas, Jos{\'e} Miguel},
 year = {2015},
 title = {Random or Genetic Algorithm Search for Object-Oriented Test Suite Generation?}
}


@article{Simons.2007,
 abstract = {Request PDF | JWalk: A tool for lazy, systematic testing of java classes by design introspection and user interaction | Popular software testing tools, such as JUnit, allow frequent retesting of modified code; yet the manually created test scripts are often... | Find, read and cite all the research you need on ResearchGate},
 author = {Simons, Anthony J. H.},
 year = {2007},
 title = {JWalk: a tool for lazy, systematic testing of java classes by design introspection and user interaction},
 url = {\url{https://www.researchgate.net/publication/225255964_JWalk_A_tool_for_lazy_systematic_testing_of_java_classes_by_design_introspection_and_user_interaction}},
 pages = {369--418},
 volume = {14},
 number = {4},
 issn = {0928-8910},
 journal = {Automated Software Engineering},
 doi = {\url{10.1007/s10515-007-0015-3}},
 file = {Simons 2007 - JWalk a tool for lazy:Attachments/Simons 2007 - JWalk a tool for lazy.pdf:application/pdf}
}


@book{Singh.2016,
 author = {Singh, Amanpreet and Thakur, Narina and Sharma, Aakanksha},
 year = {2016},
 title = {A review of supervised machine learning algorithms}
}


@article{Vargha.2000,
 abstract = {McGraw and Wong (1992) described an appealing index of effect size, called CL, which measures the difference between two populations in terms of the probability that a score sampled at random from ...},
 author = {Vargha, Andr{\'a}s and Delaney, Harold D.},
 year = {2000},
 title = {A Critique and Improvement of the CL Common Language Effect Size Statistics of McGraw and Wong},
 pages = {101--132},
 volume = {25},
 number = {2},
 journal = {Journal of Educational and Behavioral Statistics},
 doi = {\url{10.3102/10769986025002101}},
 file = {Vargha, Delaney 2000 - A Critique and Improvement:Attachments/Vargha, Delaney 2000 - A Critique and Improvement.pdf:application/pdf}
}


@article{Vassilev.2000,
 abstract = {Various techniques for statistical analysis of the structure of fitness landscapes have been proposed. An important feature of these techniques is that they study the ruggedness of landscapes by measuring their correlation characteristics. This paper proposes a new information analysis of fitness landscapes. The underlying idea is to consider a fitness landscape as an ensemble of objects that are related to the fitness of neighboring points. Three information characteristics of the ensemble are defined and studied. They are termed: information content, partial information content, and information stability. The information characteristics of a range of landscapes with known correlation features are analyzed in an attempt to reveal the advantages of the information analysis. We show that the proposed analysis is an appropriate tool for investigating the structure of fitness landscapes.},
 author = {Vassilev, V. K. and Fogarty, T. C. and Miller, J. F.},
 year = {2000},
 title = {Information characteristics and the structure of landscapes},
 pages = {31--60},
 volume = {8},
 number = {1},
 issn = {1063-6560},
 journal = {Evolutionary computation},
 doi = {\url{10.1162/106365600568095}}
}


@article{Weinberger.1990,
 abstract = {The properties of multi-peaked ``fitness landscapes'' have attracted attention in a wide variety of fields, including evolutionary biology. However, relaively little attention has been paid to the properties of the landscapes themselves. Herein, we suggest a framework for the mathematical treatment of such landscapes, including an explicit mathematical model. A central role in this discussion is played by the autocorrelation of fitnesses obtained from a random walk on the landscape. Our ideas about average autocorrelations allow us to formulate a condition (satisfied by a wide class of landscapes we call AR(1) landscapes) under which the average autocorrelation approximates a decaying exponential. We then show how our mathematical model can be used to estimate both the globally optimal fitnesses of AR(1) landscapes and their local structure. We illustrate some aspects of our method with computer experiments based on a single family of landscapes (Kauffman's ``N-k model''), that is shown to be a generic AR(1) landscape. We close by discussing how these ideas might be useful in the ``tuning'' of combinatorial optimization algorithms, and in modelling in the experimental sciences.},
 author = {Weinberger, E.},
 year = {1990},
 title = {Correlated and uncorrelated fitness landscapes and how to tell the difference},
 url = {\url{https://link.springer.com/article/10.1007/BF00202749}},
 pages = {325--336},
 volume = {63},
 number = {5},
 issn = {1432-0770},
 journal = {Biological Cybernetics},
 doi = {\url{10.1007/BF00202749}},
 file = {Weinberger 1990 - Correlated and uncorrelated fitness landscapes:Attachments/Weinberger 1990 - Correlated and uncorrelated fitness landscapes.pdf:application/pdf}
}


@article{Wetzler.2020,
 abstract = {Search-based Software Testing (SBST) views software testing as an optimization problem that can be tackled using meta-heuristic search techniques from the field of Search-Based Software Engineering (SBSE). Genetic algorithms are one such meta-heuristic, which has been successfully applied in  SBST over the years. The performance of genetic algorithms depends on several parameters of the genetic algorithm itself, called hyper-parameters, such as mutation rate, crossover rate and population size. Hyper-parameters may be problem-specific, or even problem-instance-specific, hence they have to be tuned to the problem instance at hand. Furthermore, previous work has shown that different hyper-parameter values may be optimal at different stages of the genetic algorithm. To alleviate these problems there is a class of approaches called adaptive parameter control, which continuously changes the hyper-parameters based on a set of rules. In this work I investigate the impact of adaptive parameter control on a state-of-the-art SBST algorithm called DynaMOSA. I extended EvoSuite, a tool for generating tests for Java classes, by an adaptive parameter control algorithm to combine with the existing DynaMOSA implementation. In my experiments I compared this combination with DynaMOSA alone for a total of 140 Java classes. The results of my experiments show that the chosen adaptive parameter control algorithm did not lead to increased branch coverage in the vast majority of classes tested. However, the results indicate that the chosen adaptive parameter control algorithm may lead to faster convergence of DynaMOSA for some classes, reducing the total runtime by as much as 45{\%}},
 author = {Wetzler, Kevin},
 year = {2020},
 title = {Analyzing Parameter Control in Search-Based Test Case Generation Techniques}
}


@incollection{Wilcoxon.1992,
 abstract = {The comparison of two treatments generally falls into one of the following two categories: (a) we may have a number of replications for each of the two treatments, which are unpaired, or (b) we may have a number of paired comparisons leading to a series of...},
 author = {Wilcoxon, Frank},
 title = {Individual Comparisons by Ranking Methods},
 url = {\url{https://link.springer.com/chapter/10.1007/978-1-4612-4380-9_16}},
 pages = {196--202},
 publisher = {{Springer, New York, NY}},
 booktitle = {Breakthroughs in Statistics},
 year = {1992},
 doi = {\url{10.1007/978-1-4612-4380-9{\textunderscore }16}},
 file = {Wilcoxon 1992 - Individual Comparisons by Ranking Methods:Attachments/Wilcoxon 1992 - Individual Comparisons by Ranking Methods.pdf:application/pdf}
}


@book{Wohlin.2012,
 author = {Wohlin, Claes and Ohlsson, Magnus C. and Runeson, Per and Regnell, Bj{\"o}rn and H{\"o}st, Martin and Wessl{\'e}n, Anders},
 year = {2012},
 title = {Experimentation in Software Engineering},
 isbn = {978-3-642-29043-5}
}


@article{Wolpert.1997,
 abstract = {A framework is developed to explore the connection between effective optimization algorithms and the problems they are solving. A number of {\textquotedbl}no free lunch{\textquotedbl} (NFL) theorems are presented which establish that for any algorithm, any elevated performance over one class of problems is offset by performance over another class. These theorems result in a geometric interpretation of what it means for an algorithm to be well suited to an optimization problem. Applications of the NFL theorems to information-theoretic aspects of optimization and benchmark measures of performance are also presented. Other issues addressed include time-varying optimization problems and a priori {\textquotedbl}head-to-head{\textquotedbl} minimax distinctions between optimization algorithms, distinctions that result despite the NFL theorems' enforcing of a type of uniformity over all algorithms.},
 author = {Wolpert, D. H. and Macready, W. G.},
 year = {1997},
 title = {No free lunch theorems for optimization},
 pages = {67--82},
 journal = {IEEE Transactions on Evolutionary Computation}
}


@inproceedings{WujieZheng.2010,
 abstract = {PDF | A key component of automated object-oriented unit-test generation is to find method-call sequences that generate desired inputs of a method under... | Find, read and cite all the research you need on ResearchGate},
 author = {{Wujie Zheng} and {Qirun Zhang} and {Michael R. Lyu} and {Tao Xie}},
 title = {Random Unit-Test Generation with MUT-aware Sequence Recommendation},
 url = {\url{https://www.researchgate.net/publication/220883621_Random_Unit-Test_Generation_with_MUT-aware_Sequence_Recommendation}},
 pages = {293--296},
 year = {2010},
 doi = {\url{10.1145/1858996.1859054}},
 file = {Wujie Zheng, Qirun Zhang et al. 2010 - Random Unit-Test Generation with MUT-aware:Attachments/Wujie Zheng, Qirun Zhang et al. 2010 - Random Unit-Test Generation with MUT-aware.pdf:application/pdf}
}


@inproceedings{Zamani.2019,
 abstract = {Search-based software testing (SBST) has been studied a lot in the literature, lately. Since, in theory, the performance of meta-heuristic search methods are highly dependent on their parameters, there is a need to study SBST tuning. In this study, we partially...},
 author = {Zamani, Shayan and Hemmati, Hadi},
 title = {Revisiting Hyper-Parameter Tuning for Search-Based Test Data Generation},
 url = {\url{https://link.springer.com/chapter/10.1007/978-3-030-27455-9_10}},
 pages = {137--152},
 publisher = {{Springer, Cham}},
 year = {2019},
 doi = {\url{10.1007/978-3-030-27455-9$\backslash$textunderscore}},
 file = {Zamani, Hemmati 2019 - Revisiting Hyper-Parameter Tuning for Search-Based:Attachments/Zamani, Hemmati 2019 - Revisiting Hyper-Parameter Tuning for Search-Based.pdf:application/pdf}
}


@inproceedings{Zhang.2011,
 abstract = {In object-oriented programs, a unit test often consists of a sequence of method calls that create and mutate objects. It is challenging to automatically generate sequences that are legal and behaviorally-diverse, that is, reaching as many different program states as possible. This paper proposes a combined static and dynamic test generation approach to address these problems, for code without a formal specification. Our approach first uses dynamic analysis to infer a call sequence model from a sample execution, then uses static analysis to identify method dependence relations based on the fields they may read or write. Finally, both the dynamically-inferred model (which tends to be accurate but incomplete) and the statically-identified dependence information (which tends to be conservative) guide a random test generator to create legal and behaviorally-diverse tests. Our Palus tool implements this approach. We compared it with a pure random approach, a dynamic-random approach (without a static phase), and a static-random approach (without a dynamic phase) on six popular open-source Java programs. Tests generated by Palus achieved 35{\%} higher structural coverage on average. Palus is also internally used in Google, and has found 22 new bugs in four well-tested products.},
 author = {Zhang, S.},
 title = {Palus: a hybrid automated test generation tool for java},
 pages = {1182--1184},
 isbn = {1558-1225},
 booktitle = {2011 33rd International Conference on Software Engineering (ICSE)},
 year = {2011},
 doi = {\url{10.1145/1985793.1986036}}
}


